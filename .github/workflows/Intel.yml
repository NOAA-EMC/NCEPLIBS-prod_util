# This is a GitHub actions workflow for the NCEPLIBS-prod_util project.
#
# This workflow builds with the Intel Classic and OneAPI compilers.
#
# Alex Richert, Sep 2023
name: Intel
on:
  push:
    branches:
    - develop
  pull_request:
    branches:
    - develop

# Use .bash_profile at each step to source /opt/intel/oneapi/setvars.sh
defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  Intel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compilers: ["CC=icc FC=ifort", "CC=icx FC=ifx"]

    steps:

    # See https://software.intel.com/content/www/us/en/develop/articles/oneapi-repo-instructions.html
    - name: install-intel
      run: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
        echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

    - name: cache-w3nco
      id: cache-w3nco
      uses: actions/cache@v3
      with:
        path: ~/w3nco
        key: w3nco-Intel-${{ matrix.compilers }}-${{ runner.os }}-2.4.1

    - name: checkout-w3nco
      if: steps.cache-w3nco.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: NOAA-EMC/NCEPLIBS-w3nco
        path: w3nco
        ref: v2.4.1

    - name: build-w3nco
      if: steps.cache-w3nco.outputs.cache-hit != 'true'
      run: |
        cd w3nco
        mkdir build
        cd build
        ${{ matrix.compilers }} cmake -DBUILD_WITH_BUFR=OFF  -DCMAKE_INSTALL_PREFIX=~/w3nco ..
        make -j2
        make install

    - name: checkout-prod_util
      uses: actions/checkout@v2
      with:
        path: prod_util

    - name: build-prod_util
      run: |
        cd prod_util
        mkdir build && cd build
        ${{ matrix.compilers }} cmake .. -DCMAKE_PREFIX_PATH="~/w3nco"
        make -j2
        sudo apt install faketime # for nhour unit tests
        ctest --output-on-failure --verbose
